import os
from datetime import datetime

import asyncpg
import discord
from discord.ext import commands, tasks

from grade_status import getCourseData

intents = discord.Intents.default()
intents.members = True

bot = commands.Bot('gn!', intents=intents)
bot.remove_command('help')

EMOJI_STATUS = {
    '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô': 'üîµ',
    '‡∏£‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î': 'üî¥',
    '‡∏£‡∏≠‡∏Ñ‡∏ì‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î': 'üü°',
    '‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå': '‚úÖ'
}

async def create_db_pool():
    """Creates database pool"""
    bot.db = await asyncpg.create_pool(dsn=DATABASE_URL)
    print("Database connected")


async def fetch_course_channels():
    """ fetch guild courses data from database """
    bot.course_channels = [ 
        dict(record)
        for record in await bot.db.fetch('''
            SELECT c.*, ARRAY_AGG(g.notify_text_ch) AS channels
            FROM courses c, courses_in_guild cg, guilds g
            WHERE cg.course_id = c.id AND g.id = cg.guild_id
            GROUP BY c.id
        ''')
    ]
    print(f"Current bot.course_channels={bot.course_channels}")


@bot.listen()
async def on_ready():
    """on_ready Action"""
    print('Logged on as {0}!'.format(bot.user.name))
    # init uptime
    bot.startdate = datetime.now()
    await fetch_course_channels()
    # init tasks
    notify.start()

    # set bot presence
    await bot.change_presence(activity=discord.Streaming(
        name='‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î F', url='https://www.youtube.com/watch?v=dQw4w9WgXcQ'))


@bot.command()
async def helps(ctx):
    """Returns list of commands"""
    await ctx.message.delete()
    desc = """
`gn!helps` ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

`gn!uptime` ‚Äî ‡πÅ‡∏™‡∏î‡∏á uptime ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó

`gn!setnotify` ‚Äî ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ä‡∏ô‡πÅ‡∏ô‡∏•‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞

`gn!list` ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

`gn!add <‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤> <‡πÄ‡∏ó‡∏≠‡∏°> <‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)> <‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô>` ‚Äî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

`gn!remove <id>` ‚Äî ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    """
    embed = discord.Embed(title="üöÄ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", description=desc, color=0x75e8ff)
    embed.set_footer(text="‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Custard#2161")
    await ctx.send(embed=embed)


@bot.command()
@commands.has_permissions(administrator=True)
async def setnotify(ctx):
    """Set notify channel to guilds table"""
    try:
        await ctx.message.delete()
        await bot.db.execute(
            'UPDATE guilds SET notify_text_ch=$2 WHERE id=$1', ctx.guild.id, ctx.channel.id)
        await fetch_course_channels()
        await ctx.send(f'‚úÖ **Channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå {ctx.guild.name} ‡∏Ñ‡∏∑‡∏≠**\n`{ctx.channel.name}`')
    except Exception as e:
        await ctx.send('''‚ùå **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Channel**''')
        print(e)


@bot.command()
async def uptime(ctx):
    """Returns uptime of this bot"""
    await ctx.message.delete()
    now = datetime.now()
    uptime = now - bot.startdate
    total_seconds = int(uptime.total_seconds())
    hours, remainder = divmod(total_seconds,60*60)
    minutes, seconds = divmod(remainder,60)
    await ctx.send(f'‚åõ Uptime: {hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ, {seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ')


@bot.event
async def on_guild_join(guild):
    try:
        await bot.db.execute('''
            INSERT INTO guilds(id) VALUES($1)
        ''', guild.id)
        print(f'Add guild "{guild.name}" with id={guild.id} into database')
    except Exception as e:
        print(e)

    await fetch_course_channels()


@bot.command()
@commands.has_permissions(administrator=True)
async def add(ctx, *args):
    """Adds course to database"""
    try:
        await ctx.message.delete()
        # check argument numbers
        if len(args) != 4:
            raise Exception("invalid arguments")

        # assign arguments into variables
        acadyear = int(args[0])
        semester = int(args[1])
        course_code = str(args[2])
        sec = int(args[3])

        # call web scraping function to get course data
        res = getCourseData(acadyear, semester, course_code, sec)

        # course not found
        if res is None:
            await ctx.send(
                '‚ùå **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**'
            )
            return

        # if the course has been graded
        if res[5] == '‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå':
            await ctx.send(
                '**‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÄ‡∏Å‡∏£‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß**üò∞'
            )
            return

        # check course exists in db
        course_id = await bot.db.fetchval(
            '''
            SELECT id FROM courses 
            WHERE acadyear=$1 AND semester=$2 AND course_code=$3 AND sec=$4
            ''',
            res[0], res[1], res[2], res[4]
        )

        if course_id is not None:
            # check the guild has this course
            is_exist_in_this_guild = await bot.db.fetchval(
                '''SELECT EXISTS(SELECT 1 FROM courses_in_guild WHERE guild_id=$1 AND course_id=$2)''', 
                ctx.guild.id, course_id
            )

            if is_exist_in_this_guild:
                await ctx.send('‚ö† **‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß**')
                return
            else:
                # insert course into guild
                await bot.db.execute(
                    '''INSERT INTO courses_in_guild(guild_id, course_id) VALUES($1, $2)''',
                    ctx.guild.id, course_id
                )
        else:
            # insert new course and return course id
            inserted_course_id = await bot.db.fetchval(
                '''
                INSERT INTO courses(
                    acadyear, semester, course_code, course_name, sec, status
                )
                VALUES($1, $2, $3, $4, $5, $6) RETURNING id
                ''', 
                res[0], res[1], res[2], res[3], res[4], res[5]
            )
            if inserted_course_id is not None:
                # insert to courses_in_guild
                await bot.db.execute(
                    '''INSERT INTO courses_in_guild(guild_id, course_id) VALUES($1, $2)''', 
                    ctx.guild.id, inserted_course_id
                )

    except Exception as e:
        await ctx.send('''‚ö† **‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**
`gn!add <‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤> <‡πÄ‡∏ó‡∏≠‡∏°> <‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)> <‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô>`''')
        print(e)
        return

    await fetch_course_channels()

    msg = f'''‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**

> {res[3]}(Section {sec})
> ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {EMOJI_STATUS[res[5]]} {res[5]}

‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏£‡∏≤‡∏ö\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `gn!list`'''
    await ctx.send(msg)


@bot.command()
@commands.has_permissions(administrator=True)
async def remove(ctx, *args):
    """Remove course from database by id"""
    try:
        await ctx.message.delete()

        if len(args) != 1:
            await ctx.send('''‚ö† **‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**
`gn!remove <id>`''')
            return

        course_id = int(args[0])
        guild_id = ctx.guild.id
        
        is_exist_in_this_guild = await bot.db.fetchval(
                '''SELECT EXISTS(SELECT True FROM courses_in_guild WHERE guild_id=$1 AND course_id=$2)''', 
                guild_id, course_id
            )

        if not is_exist_in_this_guild:
            await ctx.send(
                f'‚ùå **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ id={course_id} ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ**'
            )
            return

        await bot.db.fetch('''
                    DELETE FROM courses_in_guild
                    WHERE course_id=$1 AND guild_id=$2
                ''', course_id, guild_id)
        await fetch_course_channels()
        await ctx.send(f'‚úÖ **‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ id={course_id} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**')

    except Exception as e:
        await ctx.send('''‚ùå **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**''')
        print(e)


@bot.command()
async def list(ctx):
    """Returns list of courses"""
    await ctx.message.delete()
    courses = [ 
        dict(record)
        for record in await bot.db.fetch('''
            SELECT c.id, c.course_name, c.sec, c.status 
            FROM courses c, courses_in_guild cg 
            WHERE cg.guild_id=$1 AND c.id=cg.course_id
        ''', ctx.guild.id)
    ]
    if len(courses) > 0:
        embed = embed_template("üìÉ ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", """
‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ**‡πÄ‡∏û‡∏¥‡πà‡∏°**‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
`gn!add <‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤> <‡πÄ‡∏ó‡∏≠‡∏°> <‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)> <‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô>`

‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ**‡∏•‡∏ö**‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
`gn!remove <id>`
""")
        for course in courses:
            embed.add_field(name=f"{course['course_name']}\n(Section {int(course['sec'])}) [id={course['id']}]", value=f"{EMOJI_STATUS[course['status']]} {course['status']}\n", inline=True)
      
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ö† **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£**")


@tasks.loop(seconds=60)
async def notify():
    for course in bot.course_channels:
        # data scraping to get new course data
        new_data = getCourseData(course['acadyear'], course['semester'], course['course_code'], course['sec'])
        # check for new course status
        if new_data[5] != course['status']:
            # check course status is graded or not
            if new_data[5] == '‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå':
                # delete course from database
                await bot.db.execute('''
                    DELETE FROM courses
                    WHERE id=$1;
                ''', course['id'])
                desc = '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏∂‡∏Å ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î reg ‡∏î‡∏π‡πÄ‡∏•‡∏¢ üéâ'
            else:
                # update course status to database
                await bot.db.execute('''
                    UPDATE courses SET status=$1 WHERE id=$2;
                ''', new_data[5], course['id'])
                desc = '‡∏£‡∏≠‡∏ô‡∏≤‡∏ô ‡πÜ ‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ö‡∏±‡πà‡∏ô‡∏ó‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à~'

            # loop channels in this course
            for ch in course['channels']:
                channel = bot.get_channel(ch) # get channel from bot by id
                # create embed template 
                embed = embed_template("üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏£‡∏î", desc)
                embed.add_field(name=f"{new_data[3]}\n(Section {int(new_data[4])}, {int(new_data[1])}/{int(new_data[0])})", value=f"{EMOJI_STATUS[new_data[5]]} {new_data[5]}\n", inline=True)
                embed.set_image(url="https://memegenerator.net/img/instances/41287629/-.jpg")

                await channel.send(embed=embed)

            # fetch data to update variables bot.course_channels
            await fetch_course_channels()


def embed_template(title=None, desc=None):
    embed = discord.Embed(title=title, description=desc, color=0xa73b24)
    embed.set_author(name="‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏Å‡∏£‡∏î", url="https://kku.world/grade-notify-invite", icon_url=bot.user.avatar_url)
    embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/816632544623067166/982530028845793320/Monogram_Logo-01.png")
    embed.timestamp = datetime.utcnow()
    embed.set_footer(text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å reg.kku.ac.th")

    return embed


TOKEN = os.environ.get("DISCORD_BOT_SECRET")
DATABASE_URL = os.environ.get("DATABASE_URL")
bot.loop.run_until_complete(create_db_pool())
bot.run(TOKEN)
