import json
import os
from datetime import datetime

import discord
from discord.ext import commands, tasks

from grade_status import getStatus


intents = discord.Intents.default()
intents.members = True

bot = commands.Bot('gs!', intents=intents)
f = open('data.json', encoding='utf-8')
courses = json.load(f)

emoji_status = {
    '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô': 'üîµ',
    '‡∏£‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î': 'üî¥',
    '‡∏£‡∏≠‡∏Ñ‡∏ì‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î': 'üü°',
    '‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå': '‚úÖ'
}


@bot.listen()
async def on_ready():
    print('Logged on as {0}!'.format(bot.user.name))
    global startdate
    startdate = datetime.now()
    notify.start()
    write_json.start()
    await bot.change_presence(activity=discord.Streaming(
        name='‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î F', url='https://www.youtube.com/watch?v=dQw4w9WgXcQ'))


@bot.command()
async def uptime(ctx):
    """Returns uptime of this bot"""
    await ctx.message.delete()
    now = datetime.now()
    uptime = now - startdate
    total_seconds = int(uptime.total_seconds())
    hours, remainder = divmod(total_seconds,60*60)
    minutes, seconds = divmod(remainder,60)
    await ctx.send(f'‚åõ Uptime: {hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ, {seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ')


@bot.listen()
async def on_message(message):
    print('Message from {0.author}: {0.content}'.format(message))


@bot.command()
@commands.has_permissions(administrator=True)
async def add(ctx, *args):
    """Adds course to database"""
    try:
        await ctx.message.delete()
        if len(args) != 4:
            raise Exception("invalid arguments")

        acadyear = int(args[0])
        semester = int(args[1])
        course_code = str(args[2])
        sec = int(args[3])

        res = getStatus(acadyear, semester, course_code, sec)

        if res is None:
            await ctx.send(
                '‚ùå **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**'
            )
            return

        if res[5] == '‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå':
            await ctx.send(
                '**‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÄ‡∏Å‡∏£‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß**üò∞'
            )
            return

        for course in courses:
            if course['acadyear'] == res[0] and course['semester'] == res[
                    1] and course['course_code'] == res[2] and course[
                        'sec'] == res[4]:
                await ctx.send('‚ö† **‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß**')
                return

        courses.append({
            'acadyear': res[0],
            'semester': res[1],
            'course_code': res[2],
            'course_name': res[3],
            'sec': res[4],
            'status': res[5]
        })

    except Exception as e:
        await ctx.send('''‚ö† **‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**
`gs!add <‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤> <‡πÄ‡∏ó‡∏≠‡∏°> <‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)> <‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô>`''')
        print(e)
        return

    msg = f'''‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**

> {res[3]}(Section {sec})
> ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {emoji_status[res[5]]} {res[5]}

‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏£‡∏≤‡∏ö\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `gs!list`'''
    await ctx.send(msg)


@bot.command()
async def list(ctx):
    """Returns list of courses"""
    await ctx.message.delete()
    if len(courses) > 0:
        embed = discord.Embed(title="‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", description="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n`gs!add <‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤> <‡πÄ‡∏ó‡∏≠‡∏°> <‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)> <‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô>`", color=0xa73b24)
        embed.set_author(name="‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏Å‡∏£‡∏î", url="https://kku.world/grade-notify-invite", icon_url=bot.user.avatar_url)
        embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/816632544623067166/982530028845793320/Monogram_Logo-01.png")
        for course in courses:
            embed.add_field(name=f"{course['course_name']}\n(Section {course['sec']})", value=f"{emoji_status[course['status']]} {course['status']}", inline=True)
        embed.timestamp = datetime.utcnow()
        embed.set_footer(text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å reg.kku.ac.th")
      
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ö† **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£**")


@tasks.loop(seconds=10)
async def notify():
    for course in courses:
        new_data = getStatus(course['acadyear'], course['semester'],
                             course['course_code'], course['sec'])
        if new_data[5] != course['status']:
            print(f"{new_data[5]}, {course['status']}")
            if new_data[5] == '‡∏™‡πà‡∏á‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå':
                courses.remove(course)
                desc = '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏∂‡∏Å ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î reg ‡∏î‡∏π‡πÄ‡∏•‡∏¢'
            else:
                course['status'] = new_data[5]
                desc = '‡∏£‡∏≠‡∏ô‡∏≤‡∏ô ‡πÜ ‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ö‡∏±‡πà‡∏ô‡∏ó‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à~'

            for guild in bot.guilds:
                for channel in guild.text_channels:
                    if channel.name == 'grade-notify':
                        embed = discord.Embed(title="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏£‡∏î üéâ", description=desc, color=0xa73b24)
                        embed.set_author(name="‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏Å‡∏£‡∏î", url="https://kku.world/grade-notify-invite", icon_url=bot.user.avatar_url)
                        embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/816632544623067166/982530028845793320/Monogram_Logo-01.png")
                        embed.set_image(url="https://memegenerator.net/img/instances/41287629/-.jpg")
                        embed.add_field(name=f"{new_data[3]}(Section {new_data[4]})", value=f"{emoji_status[new_data[5]]} {new_data[5]}", inline=True)
                        embed.timestamp = datetime.utcnow()
                        embed.set_footer(text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å reg.kku.ac.th")
      
                        await channel.send(embed=embed)


@tasks.loop(seconds=300)
async def write_json():
    with open("data.json", "w", encoding="utf8") as f:
        json.dump(courses, f, indent=4, ensure_ascii=False)
        print('courses saved!')


TOKEN = os.environ.get("DISCORD_BOT_SECRET")
bot.run(TOKEN)
